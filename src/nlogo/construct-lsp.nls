;; Code to build landscapes using the MRC method - adapted from the book.


to test-csv
  let class-abund csv:from-file "initial_composition.csv"
  show class-abund
end  

to init-patch-mrc-variables
  ask patches [
    set class -1
    set in-perc-cluster? false
    set cluster-leader nobody
  ]
end

;;; Retrieve the list of relative probabilities of 
;;; suitability classes from a file
;to read-class-file [class-file]
;  carefully [
;    file-open class-file
;    set num-classes file-read ;; first item in file is the number of classes
;    set class-CFD (list 0) ;; initialise the CFD to 0
;    set class-FD [] ;; empty FD
;    while [ not file-at-end? ] [
;      let prev-n last class-CFD
;      let next-n file-read
;      set class-CFD lput (next-n + prev-n) class-CFD
;      set class-FD lput next-n class-FD
;    ]
;    set class-CFD but-first class-CFD ;; throw away the zero
;    let tot-rel-p last class-CFD
;    set class-CFD map [ i -> i / tot-rel-p ] class-CFD   ;; cumulative freq dist of classes
;    set class-FD map [ i -> i / tot-rel-p ] class-FD     ;; freq of classes
;
;    file-close
;  ] [ file-close ]
;end

;;; Retrieve the list of relative probabilities of 
;;; suitability classes from a CSV file with names
to read-class-file-csv [class-file]
  carefully [
    let class-abund csv:from-file "initial_composition.csv"; csv:from-file class-file
    set num-classes length class-abund
    set class-FD slice unnest class-abund range-from-to-by 1 (num-classes * 2) 2
    let sum-class-p sum class-FD
    
    set class-CFD cumulative-sum class-FD
    
    set class-CFD map [i -> i / sum-class-p] class-CFD
    set class-FD map [i -> i / sum-class-p] class-FD
    
    show class-abund
    show num-classes
    show class-CFD
    show class-FD
    
    
    file-close
  ] [ file-close ]
end

;; Internal setup based on SIMMAP algorithm
;; This is slow -- I believe due to repeated use of long lists
to setup-mrc [remove-singleton-patches? sequentially-assign-clusters?]
  ;; assign patches to percolation cluster
  ask patches [ 
    if random-float 1 < perc-seed [ 
      set in-perc-cluster? true 
      set pcolor white 
    ]
  ]
  mark-habitat-patches
  assign-habitat-patches-by-proportion sequentially-assign-clusters?
  set clusters [] ;; throw away the list
  assign-unassigned-to-habitat-patches
  if remove-singleton-patches? [
    let singletons patches with [not any? neighbors4 with [class = [class] of myself]]
    ask singletons [
      set class [class] of one-of neighbors4
    ]
  ]
end


;; identifies and labels sequentially 
;; from 0 the connected regions
;; in the percolation cluster
to mark-habitat-patches
  let patch-count 1
  let patches-to-mark sort patches with [in-perc-cluster?]
  while [length patches-to-mark > 0] [
    let this-cluster (patch-set one-of patches-to-mark)
    let current-cluster patch-set nobody
    ;; iteratively grow the patch-set that is this cluster
    while [any? this-cluster] [ 
      ;; mark by setting habitat-patch value
      ask this-cluster [ 
        set class patch-count
      ]
      set current-cluster (patch-set current-cluster this-cluster)
      ;; get the next set from the neighbours 4 of the current set
      set this-cluster (patch-set [neighbors4] of this-cluster) with [to-mark?]
    ]
    ;; increment the patch-count and reset the set to mark
    set patch-count patch-count + 1
    set patches-to-mark filter [i -> [class] of i < 0] patches-to-mark
    ;; add the current cluster to the list of all clusters
    set clusters lput current-cluster clusters
  ]
end


to-report to-mark?
  report class < 0 and in-perc-cluster?
end


;; class-FD is a list of the required landscape proportion in each type
;; cells in regions of the percolation cluster should be relabelled
;; as 1, 2, 3... in the required proportions...
to assign-habitat-patches-by-proportion [sequentially-assign-clusters?]
  ;; make a list of the target number of patches in each class
  let num-patches-set count patches with [class > 0]
  let target-counts map [ i -> i * num-patches-set ] class-FD
  ;; iteratively assigning clusters in the percolation cluster
  ;; to a class, always adding to the class which is furthest
  ;; from its target count
  if sequentially-assign-clusters? [
    set clusters reverse sort-by [ [a b ] -> count a > count b] clusters 
  ]
  
  foreach clusters [ i ->
    let biggest-shortfall max target-counts
    let biggest-shortfall-index position biggest-shortfall target-counts
    ask i [ 
      set class biggest-shortfall-index
    ]
    ;; update the target counts to reflect assignment just made
    set target-counts replace-item biggest-shortfall-index target-counts (biggest-shortfall - count i)
  ]
end


;; patches so far not assigned to a class are
;; now assigned based on the classes of neighbouring assigned patches 
to assign-unassigned-to-habitat-patches
  ask patches with [class < 0] [ 
    let N neighbors with [class >= 0]
    ifelse any? N
    [ set class one-of modes [class] of N ]
    [ let random-draw random-float 1
      let i 0
      let value-set? false
      while [ i < num-classes and not value-set? ] [
        if random-draw <= (item i class-CFD) [
          set class i
          set value-set? true
        ]
        set i i + 1
      ]
    ]
  ]
end


;; routines here label the patches at the end:: modified nl model library
to find-clusters
  loop [
    ;; pick a random patch that isn't in a cluster yet
    let seed one-of patches with [cluster-leader = nobody]
    
    ;; if we can't find one, then we're done!
    if seed = nobody [ stop ]
    
    ;; otherwise, make the patch the "leader" of a new cluster
    ;; by assigning itself to its own cluster, then call
    ;; grow-cluster to find the rest of the cluster
    ask seed
    [ set cluster-leader self
      grow-cluster ]
  ]
end

to grow-cluster  ;; patch procedure
  ask neighbors4 with [(cluster-leader = nobody) and
    (pcolor = [pcolor] of myself)]
  [ set cluster-leader [cluster-leader] of myself
    grow-cluster ]
end

;; once all the clusters have been found, this is called
;; to put numeric labels on them so the user can see
;; that the clusters were identified correctly
to id-clusters
  let counter 0
  loop
  [ ;; pick a random patch we haven't labeled yet
    let pch one-of patches with [cluster-id = 0]
    if pch = nobody [ stop ]
    
    ;; give all patches in the chosen patch's cluster
    ;; the same label
    ask pch
    [ ask patches with [cluster-leader = [cluster-leader] of myself]
      [ set cluster-id counter ] ]
    set counter counter + 1 ]
end

;; this then gives each cluster an age based on its id
to age-by-cluster
  let ids remove-duplicates sort [cluster-id] of patches 
    
  foreach ids
  [  i ->
     let f-class [class] of one-of patches with [cluster-id = i] 
     let half-age ((table:get base-changes-dict f-class ) / 2)
     let nc half-age + random half-age 

     ask patches with [cluster-id = i]
     [
       set next-change nc
     ]  
  ] 
end  


;; code to access the NLMR package via the simpleR extension
;; just have FBM here but song remains the same for other algorithms

to build-fbm

  sr:setup

  sr:run "library(NLMR)"
  sr:set "ncol" max-pxcor + 1
  sr:set "nrow" max-pycor + 1
  sr:set "fractal_dim" 1.2;; fractal_dim
   
  (sr:run 
    "fbm <- NLMR::nlm_fbm(ncol, nrow, fractal_dim)"
    "fbm_df <- raster::as.data.frame(fbm, xy = TRUE)"
  )
  
  ;; get the coordinates - did it like this as raster::as.data.frame seemed broken?
  let x sr:runresult "rep(seq(0, ncol - 1), nrow)"
  let y sr:runresult "rep(seq(nrow - 1, 0), each = ncol)"
  let fbm sr:runresult "raster::values(fbm)"
  
  (foreach x y fbm [[xc yc z] -> ask patch xc yc  [ set edaphic-grad z ]])
end
