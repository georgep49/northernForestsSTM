;; Code to build landscapes using the MRC method 
;; Adapted from O'S & P (2013).

to init-patch-mrc-variables
  
  ifelse file-exists? init-composition-file = true
  [
    read-class-file-csv init-composition-file 
  ]
  [
    print "Initial class composition file missing!"
  ]

  ask patches [
    set class -1
    set in-perc-cluster? false
    set cluster-leader nobody
  ] 
  
end


;;; Retrieve the list of relative probabilities of 
;;; suitability classes from a CSV file with names
to read-class-file-csv [class-file]
  carefully [
    set class-init-abund csv:from-file class-file
    set num-classes length class-init-abund
    
    ;; keep the raw one as used in forest gully stuff
    set class-raw-FD slice unnest class-init-abund range-from-to-by 1 (num-classes * 2) 2
    let sum-class-p sum class-raw-FD
    set class-CFD cumulative-sum class-raw-FD
    
    ;; rescaled to sum to one
    set class-CFD map [i -> i / sum-class-p] class-CFD
    set class-FD map [i -> i / sum-class-p] class-raw-FD
    
    ;; as read in csv to table
    set class-init-abund table:from-list class-init-abund
    
    file-close
  ] 
  [ file-close ]
end

;; Internal setup based on SIMMAP algorithm
;; This is slow -- I believe due to repeated use of long lists
to setup-mrc [remove-singleton-patches? sequentially-assign-clusters?]
  ;; assign patches to percolation cluster
  ask patches [ 
    if random-float 1 < perc-seed [ 
      set in-perc-cluster? true 
      ; set pcolor white 
    ]
  ]
  mark-habitat-patches
  assign-habitat-patches-by-proportion sequentially-assign-clusters?
  set clusters [] ;; throw away the list
  assign-unassigned-to-habitat-patches
  if remove-singleton-patches? [
    let singletons patches with [not any? neighbors4 with [class = [class] of myself]]
    ask singletons [
      set class [class] of one-of neighbors4
    ]
  ]
end


;; identifies and labels sequentially 
;; from 0 the connected regions
;; in the percolation cluster
to mark-habitat-patches
  let patch-count 1
  let patches-to-mark sort patches with [in-perc-cluster?]
  while [length patches-to-mark > 0] [
    let this-cluster (patch-set one-of patches-to-mark)
    let current-cluster patch-set nobody
    ;; iteratively grow the patch-set that is this cluster
    while [any? this-cluster] [ 
      ;; mark by setting habitat-patch value
      ask this-cluster [ 
        set class patch-count
      ]
      set current-cluster (patch-set current-cluster this-cluster)
      ;; get the next set from the neighbours 4 of the current set
      set this-cluster (patch-set [neighbors4] of this-cluster) with [to-mark?]
    ]
    ;; increment the patch-count and reset the set to mark
    set patch-count patch-count + 1
    set patches-to-mark filter [i -> [class] of i < 0] patches-to-mark
    ;; add the current cluster to the list of all clusters
    set clusters lput current-cluster clusters
  ]
end


to-report to-mark?
  report class < 0 and in-perc-cluster?
end


;; class-FD is a list of the required landscape proportion in each type
;; cells in regions of the percolation cluster should be relabelled
;; as 1, 2, 3... in the required proportions...
to assign-habitat-patches-by-proportion [sequentially-assign-clusters?]
  ;; make a list of the target number of patches in each class
  let num-patches-set count patches with [class > 0]
  let target-counts map [ i -> i * num-patches-set ] class-FD
  ;; iteratively assigning clusters in the percolation cluster
  ;; to a class, always adding to the class which is furthest
  ;; from its target count
  if sequentially-assign-clusters? [
    set clusters reverse sort-by [ [a b ] -> count a > count b] clusters 
  ]
  
  foreach clusters [ i ->
    let biggest-shortfall max target-counts
    let biggest-shortfall-index position biggest-shortfall target-counts
    ask i [ 
      set class biggest-shortfall-index
    ]
    ;; update the target counts to reflect assignment just made
    set target-counts replace-item biggest-shortfall-index target-counts (biggest-shortfall - count i)
  ]
end


;; patches so far not assigned to a class are
;; assigned based on the classes of neighbouring assigned patches
to assign-unassigned-to-habitat-patches
  ask patches with [class < 0] [ 
    let N neighbors with [class >= 0]
    ifelse any? N
    [ set class one-of modes [class] of N ]
    [ let random-draw random-float 1
      let i 0
      let value-set? false
      while [ i < num-classes and not value-set? ] [
        if random-draw <= (item i class-CFD) [
          set class i
          set value-set? true
        ]
        set i i + 1
      ]
    ]
  ]
end


;; routines here label the patches at the end:: modified nl model library
to find-clusters
  loop [
    ;; pick a random patch that isn't in a cluster yet
    let seed one-of patches with [cluster-leader = nobody]
    
    ;; if we can't find one, then we're done!
    if seed = nobody [ stop ]
    
    ;; otherwise, make the patch the "leader" of a new cluster
    ;; by assigning itself to its own cluster, then call
    ;; grow-cluster to find the rest of the cluster
    ask seed
    [ set cluster-leader self
      grow-cluster ]
  ]
end

to grow-cluster  ;; patch procedure
  ask neighbors4 with [(cluster-leader = nobody) and (class = [class] of myself)]
  [ set cluster-leader [cluster-leader] of myself
    grow-cluster ]
end

;; once all the clusters have been found, this is called
;; to put numeric labels on them so the user can see
;; that the clusters were identified correctly
to id-clusters
  let counter 0
  loop
  [ ;; pick a random patch we haven't labeled yet
    let pch one-of patches with [cluster-id = 0]
    if pch = nobody [ stop ]
    
    ;; give all patches in the chosen patch's cluster
    ;; the same label
    ask pch
    [ ask patches with [cluster-leader = [cluster-leader] of myself]
      [ set cluster-id counter ] ]
    set counter counter + 1 ]
end


;; this then gives each cluster an age based on its id
;; classes "gr" (0), "d-sh" (1), m-sh (2), "ksh-k" (3) "ksh-nok" (5)  
;; "yf-k" (6)  "yf-nok" (7) "old" (8) "ksh-p" (9) "yf-p" (10) "old-p" (11)

to age-by-cluster
  let ids remove-duplicates sort [cluster-id] of patches 
    
  foreach ids
  [  i ->
    let f-class [class] of one-of patches with [cluster-id = i] 
    let half-age ((table:get base-changes-dict f-class ) / 2)
    let nc half-age + random half-age 

    ask patches with [cluster-id = i]
    [
      set next-change nc
      
      ;; and stock the regenbank to (try to) avoid artefactual stalling
      if class = "ksh-k" or class = "ksh-nok" or class = "ksh-p"
      [
        let n0 random-poisson (crit-density-yng * (nc / (table:get base-changes-dict class)))
        let n1 ceiling (n0 * random-float 0.5)
        set regenbank-yfor replace-item 0 regenbank-yfor n0
        set regenbank-yfor replace-item 1 regenbank-yfor n1
      ]
    
      if class = "yf-k" or class = "yf-nok" or class = "yf-p"
      [
        let n0 random-poisson (crit-density-old * (nc / (table:get base-changes-dict class)))
        let n1 ceiling (n0 * random-float 0.5)
        set regenbank-ofor replace-item 0 regenbank-ofor n0
        set regenbank-ofor replace-item 1 regenbank-ofor n1
      ]  
      
     ]  
  ] 
end  


;; this is code to switch patch classes around so pohutakawa appears close to coast
;; at start up.
to starting-coastal-forest
  
  ;let not-coastal-forest patches with 
  ;let coastal-forest patches 
  
  let ids remove-duplicates sort [cluster-id] of patches 
  
  ;; loop over patches using their cluster id from MRC
  foreach ids
  [  i ->
     
    let focal-cl patches with [cluster-id = i]
    let focal-cl-class [class] of one-of focal-cl
    
    let mean-dist mean [distance-to-coast] of focal-cl
    
    ;; if closer than critical dist to coast (average) then see if change to *-p
    ;; the one-of lets us use member? and relies on the fact that the entire cluster is one class.
    
    if (mean-dist <= table:get aux-params-dict "max-poh-coast") and 
                   (focal-cl-class = "ksh-k" or focal-cl-class = "yf-k" or focal-cl-class = "ksh-nok" or focal-cl-class = "yf-nok" or focal-cl-class = "old-f")
    [ 
           
      let b0 table:get aux-params-dict "poh-coast-b0"
      let b1 table:get aux-params-dict "poh-coast-b1"
      let b2 table:get aux-params-dict "poh-coast-b1"
        
      if random-float 1 < (decr-limit-fx b0 b1 b2 (mean-dist / table:get aux-params-dict "max-poh-coast"))
      [  
        ; print "changing"(mean [edaphic-grad] of focal-cl)
        ask focal-cl
        [
          if class = "ksh-k" [set class "ksh-p" ]
          if class = "yf-k" [set class "yf-p"]
          if class = "ksh-bok" [set class "ksh-p"]
          if class = "yf-nok" [set class "yf-p"]
          if class = "old-f" [set class "old-p"]
          
          set prev-class class
        ]
      ]    
    ]
    
    ;; and the opposite *-p to X, with X also considering the edaphic conditions
    
    if (mean-dist > table:get aux-params-dict "max-poh-coast") and
                     (focal-cl-class  = "ksh-p" or focal-cl-class = "yf-p" or focal-cl-class = "old-p")
    [ 
      let edaphic-flip random-float 1    ;; do it outside ask so whole patch changes
      let mean-ed (mean [edaphic-grad] of focal-cl)
      ask focal-cl
      [
        if class = "ksh-p" 
        [
          ifelse edaphic-flip < mean-ed  ;; *-nok or *-k based on edaphics
          [ set class "ksh-k"]
          [ set class "ksh-nok" ]
          
        ]
      
        if class = "yf-p" 
        [
          ifelse edaphic-flip < mean-ed
          [ set class "yf-k" set prev-class class]
          [ set class "yf-nok" set prev-class class]
        ]
      
        if class = "old-p" [ set class "old-f" ]
        
        set prev-class class
      ]  
   ]
    
  ]
end  


to edge-farmland
  
  let edge-patches patches with [pxcor = max-pxcor]
 
  ask n-of (random-poisson farm-edge-nodes) edge-patches [set farm-node? true] 

  ask patches with [farm-node? = true]
  [
    let sz random-poisson mean-farm-depth
    let px pxcor
    let py pycor
    
    ask patches with [(pycor < py + sz) and (pycor > py - sz) and (pxcor > px - sz)]
    [
      set class "gr"
      set prev-class class
      set farm? true
    ]
  ]  
end  

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Functions to add forest to gullies

;; Function to check we have the right amount of forest cover
;; forest *type* is allocated at end of forest gully so don't determine it here
to forest-composition-check    
;    options are 
;    1. fgc is gte f-cover, then set yf types in class-FD to zero and reduce fgc (so only gully forest)
;    2. fgc is lt than f-cover -> reduce class-FD to x - fgc / 5 ...
  
  let f-cover sum slice class-FD forest-idx-list ; total forest cover
  set forest-gully-cover f-cover * forest-gully-prop
  
  ;; too much gully forest
  if forest-gully-cover >= f-cover
  [
    foreach forest-idx-list [x -> set class-FD replace-item x class-FD 0 ]
    set forest-gully-cover f-cover
  ]
   
  ;; too little gully forest
  if forest-gully-cover < f-cover
  [
    let f-excess f-cover - forest-gully-cover
    foreach forest-idx-list [x -> 
      let f item x class-FD
      set class-FD replace-item x class-FD max (list 0 (f - (f-excess / 5))) ]
  ]
  
  ;; And now rescale the various lits used in the MRC algorithm
  let sum-class-p sum class-FD

  set class-CFD cumulative-sum class-FD
    
  set class-CFD map [i -> i / sum-class-p] class-CFD
  set class-FD map [i -> i / sum-class-p] class-FD
   
end  

to build-gully-forest
  
  while [count patches with [gully-forest? = true] < (forest-gully-cover * max-pxcor * max-pycor)]
  [
    start-forest-grow
  ]
  
  ask patches with [gully-forest? = true] [set class "old-f"]
  
end

to start-forest-grow
  set forestArea 0
  
  ask one-of patches with [edaphic-grad < 0.4 and tpi = 1] ;; gully
  [
    set gully-forest? true
    set forestFront patch-set self              ;; a new disturb-front patch-set
  ]
 
  forest-grow (forest-gully-cover * max-pxcor * max-pycor)

end


to forest-grow [ maxArea ]
  while [ any? forestFront and forestArea <= maxArea ]                 ;; Stop when we run out of active disturbance front
  [
    let newForestFront patch-set nobody     ;; Empty set of patches for the next 'round' of the disturbance

    ask forestFront
    [
      let N neighbors;;  with [ gully-forest? != true ]

      ask N    ;; values here arbitrary but designed to given patchy rather than filled shapes
      [
        let p 0.125
        if twi < 0.35 [set p 0.35]
        if twi > 0.35 and twi < 0.75 [set p 0.225]
        
        if (random-float 1) <= p [ set newForestFront ( patch-set newForestFront self) ]
      ]
   ]

   set forestFront newForestFront
   ask newForestFront [set gully-forest? true]
   set forestArea forestArea + ( count newForestFront )
  ]

end

;; This is to identify gully patches and then change their classes *prior* to coast etc.
to tag-gully-forest
  
  ;; find clusters where there is gully forest 
  let ids remove-duplicates sort [cluster-id] of patches with [gully-forest? = true]
  
  ;; relative probabilities of the different forest types
  let f-p (slice class-raw-FD forest-idx-list)
  set f-p cumulative-sum (map [i -> i / (sum f-p)] f-p)
  
  ;; allocate forest types
  foreach ids
  [  f ->
    let random-draw random-float 1
    ask patches with [cluster-id = f] [ 
      let i 0
      let value-set? false
      while [ i < num-classes and not value-set? ] [
        if random-draw <= (item i f-p) [ 
          set class item i forest-classes-list
          set value-set? true
        ]
        set i i + 1
      ]
    ]
  ]  

end


