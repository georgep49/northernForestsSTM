;; Code base for building terrain (ridge-gully sequence) and hydrological metrics

to build-catena

  set nhb-scalar 2 * sqrt 2
  ridge-gully true 3 5 100 0.05 0.1 ;;  [desc valley-width elev-step curr-elevation noise diffuse-strength]
  
  ask patches [
    set flow-accum 1           ;; Each patch contributes at least itself
    set flow-to nobody
  ]

  calculate-D8-flow-direction
  calculate-slope
  calculate-slope-aspect-horn
  calculate-optim-flow-accum
  calculate-TWI
  calculate-TPI
  ;;calculate-hillshade
  
  ;; edaphic gradient is TWI rescaled from 0-1 with 0 wettest and 1 driest
  let max-TWI max [TWI] of patches
  ask patches [ set edaphic-grad 1 - ( TWI / max-TWI ) ]
  
end

;; D8 flow direction: Choose the steepest downhill neighbor from 8 directions
to calculate-D8-flow-direction
  ask patches [
    let downhill-neighbors neighbors with [elevation < [elevation] of myself]
    if any? downhill-neighbors [
      set flow-to min-one-of downhill-neighbors [elevation]
    ]
  ]
end

;; Slope calculation based on the steepest descent direction
to calculate-slope
  ask patches [
    if flow-to != nobody [
      let dz elevation - ([elevation] of flow-to)
      let di distance flow-to * patch-grain
      ;set slope math:atan (dz / di)  ;; Slope in radians
      set slope atan dz di * (pi / 180) ;; Slope in radians
    ]
  ]
end

;; https://www.aazuspan.dev/blog/terrain-algorithms-from-scratch/
to calculate-slope-aspect-horn
  
  ask patches with [pxcor > 0 and pxcor < max-pxcor and pycor > 0 and pycor < max-pycor]
  [
  ;; Horn's algorithm (https://people.csail.mit.edu/bkph/papers/Hill-Shading.pdf)
  ;; Use the same basic calcualtions so do all at once
  let znw [elevation] of patch-at -1 1
  let zsw [elevation] of patch-at -1 -1
  let zne [elevation] of patch-at 1 1
  let zse [elevation] of patch-at 1 -1
 
  let zn [elevation] of patch-at 0 1
  let ze [elevation] of patch-at 1 0
  let zw [elevation] of patch-at -1 0
  let zs [elevation] of patch-at 0 -1
  
  ;; east-west gradient 
  let dz_ew (((znw + zsw + 2 * zw) - (zne + zse + 2 * ze)) / 8)
  let dz_ns (((zsw + zse + 2 * zs) - (znw + zne + 2 * zn)) / 8)
  let dz sqrt (dz_ew ^ 2 + dz_ns ^ 2)
    
  set slope-horn atan slope patch-grain * (pi / 180)
  
  ;;;;;;;;
  ;; then aspect
  set dz_ew ((znw + zsw + 2 * zw) - (zne + zse + 2 * ze)) / (8 * patch-grain)
  set dz_ns ((zsw + zse + 2 * zs) - (znw + zne + 2 * zn)) / (8 * patch-grain)
    
  set aspect atan dz_ew dz_ns   ;; note 0 is N (see ?atan)
  ifelse aspect > 90
    [set aspect 450 - aspect]
    [set aspect 90 - aspect]
  
  
  if aspect > 315 or aspect <= 45 [set aspect-arc 1] ; or as circular
  if aspect > 45 and aspect <= 135 [set aspect-arc 2]
  if aspect > 135 and aspect <= 225 [set aspect-arc 3]
  if aspect > 225 and aspect <= 315 [set aspect-arc 4]
  
  ]
end  

;; https://www.aazuspan.dev/blog/terrain-algorithms-from-scratch/
to calculate-hillshade
  let azimuth 315
  let altitude 45

  ask patches
  [
;; Convert solar altitude to zenith and convert everything to radians
  let zenith 90 - altitude
  let slope_deg slope * (180 / pi)

    ;; Calculate hillshade and scale to 8-bit
    set hs 255 * (cos(zenith) * cos(slope_deg) + sin(zenith) * sin(slope_deg) * cos(azimuth - aspect)) 
  ] 
end

;; Flow accumulation using D8 routing
to calculate-flow-accum
  let patches-sorted patches with [flow-to != nobody]
  ask patches-sorted [
    let receivers patches with [flow-to = myself]
    ask receivers [
      set flow-accum flow-accum + [flow-accum] of myself  ;; Accumulate flow
    ]
  ]
end

;; Flow accumulation using D8 routing from high to low
to calculate-optim-flow-accum
  let sorted-patches reverse sort-on [elevation] patches

  foreach sorted-patches [ p ->
    ask p [
      if flow-to != nobody [
        ask flow-to [
          set flow-accum flow-accum + [flow-accum] of p
        ]
      ]
    ]
  ]
end

;; Compute Topographic Wetness Index (TWI; 0 dry to ... high wet)
;; https://en.wikipedia.org/wiki/Topographic_wetness_index
to calculate-TWI
  ask patches [
    if slope > 0 [
      set TWI ln (flow-accum / ( tan slope * (180 / pi)))
    ]
    if TWI <= 0 [ set TWI 0 ]  ;; Prevent division errors - this is very steep slopes
;; https://gis.stackexchange.com/questions/104543/getting-negative-topographic-wetness-index-twi-values-in-saga-gis/113535#113535    
  ]
  
  ;; Need to tidy up the zero slope locales (set to high value, 95th% of TWI aribitrarily)
  let sort-twi (sort [twi] of patches with [slope > 0 and twi > 0])
  let n round length sort-twi * 0.95  
  let zero-twi item n sort-twi
  ask patches with [slope = 0 ] [ set twi zero-twi ]
  
end

;; get topographic position 
to calculate-TPI
  ask patches
  [
    let m mean [elevation] of other patches in-radius nhb-scalar
    let rel-elevation elevation - m
    if rel-elevation <= -2 [set TPI 1]   ; gully
    if rel-elevation >= -2 and rel-elevation < 2 [set TPI 2] ; slope
    if rel-elevation >= 2 [set TPI 3] ; ridge
    
    ask patches with [valley? = true] [set TPI 1] ; catch valley-bottoms
  ]
end

;; make a synthetic ridge-gully-ridge sequence
to ridge-gully [desc valley-width elev-step curr-elevation noise diffuse-strength]

  let i 0

  ask patches with [pxcor = i] [ set elevation curr-elevation ]

  while [i <= max-pxcor] [
    ask patches with [pxcor = i]
    [
      ifelse desc = true
      [set elevation curr-elevation - elev-step]
      [set elevation curr-elevation + elev-step]
    ]

    ifelse desc = true
    [ set curr-elevation curr-elevation - elev-step ]
    [ set curr-elevation curr-elevation + elev-step ]

    if curr-elevation = 0 [
      set desc false
      set i i + (valley-width - 1) + random-poisson (valley-width / 2)
    ]

    if curr-elevation = 100 [set desc true]
    set i i + 1
  ]

  ask patches with [elevation = 0 ] [
    set valley? true
    set elevation elevation + random-float 0.01
  ]
  
  ask patches [ set elevation (elevation * (random-normal 1 noise))]
  diffuse elevation diffuse-strength

end