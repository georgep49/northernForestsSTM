;; Functions associated with vegetation change (succession, dispersal, regen)

;; This sorts out what happens after a fire - this is where pyrophyllic invasion takes place


;; TO DO 
;; ----- need to add landscape effects here

to post-fire
  
  let fire-hist-len table:get aux-params-dict "fire-hist-len"
  
  let new-invasions 0
  
  ;; deal with the burned patches
  ask patches with [burned?]
  [
    set prev-class class

    set fire-history lput ticks fire-history
    let last-x-fires length filter [ f -> f >= ticks - fire-hist-len ] fire-history
    let local-weeds count neighbors with [class = "d-sh"]

    ;; assume regen bank destroyed
    set regenbank-yfor (list 0 0)
    set regenbank-ofor (list 0 0)

    ;; grass returns to grass (prob redundant code but makes things clear)
    if class = "gr" [ set class "gr"]

    ;; transition to manuka or invaded shrubland?
    if invasion? = true and class != "gr"
    [
      ifelse random-float 1 <= (base-invasion + (fire-invasion * last-x-fires)) * (1 + (local-weeds / 8))
      [
        set class "d-sh"   ;; to degraded shrubland
        set next-change ticks + (table:get base-changes-dict class) + (last-x-fires * fire-slow)
        set flammability table:get flammability-dict class
      ]
      [
        set class "m-sh"   ;; to manuka
        set next-change ticks + (table:get base-changes-dict class) + (last-x-fires * fire-slow)
        set flammability table:get flammability-dict class
      ]
    ]
    
    if invasion? = false and class != "gr"
    [
        set class "m-sh"
        set next-change ticks + (table:get base-changes-dict class) + (last-x-fires * fire-slow)
        set flammability table:get flammability-dict class
    ]
  ]

  
  ;; update the fire history records
  set new-invasions count patches with [class = "d-sh" and prev-class > "d-sh"]

  set fire-size count patches with [burned?]
  set fire-year lput ticks fire-year 
  set fire-size-list lput fire-size fire-size-list
  set fire-stats lput fire-size fire-stats

  let types-burned map [ cl -> count patches with [burned? and prev-class = cl] ]  class-names-list

  foreach types-burned [ cl -> set fire-stats lput (cl / fire-size) fire-stats ]

  set fire-stats lput mean [flammability] of patches fire-stats
  set fire-stats lput new-invasions fire-stats

  set fire-record lput fire-stats fire-record
  
  ;; reset patches and update colours
  ask patches [set burned? false]
  colour-by-class
end


;; This is the linear 'time elapsed' component of the succession process
;; Work out next state for cells due to change and time until next change in the 
;; absence of perturbation

;; edaphic gradient 
;; aspect :: 1 N 2 E 3 S 4 W
;; lform position :: 1 gully, 2 slope, 3 ridge
to succession

  ;; find patches where change will occur
  let change-patches patches with [next-change <= ticks and next-change != -999]

  if any? change-patches
  [
    ask change-patches
    [
      set prev-class class

      ;; transition from grassland to manuka shrubland
      if class = "gr"
      [
        ;; check whether farmland can revegetate or not
        if farm-revegetate? = true or (farm-revegetate? = false and farm? = false)
        [
         let forest-nhb count neighbors with [class != "gr" and class != "d-sh"]
         let trans 0
 
         ;; Grassland that has been in grass for lt base years -> no change
         ;; Base chance after 20 years, increased by having nhbs in woody veg
         ifelse forest-nhb = 0 
         [
           ifelse last-change > table:get base-changes-dict class 
           [ set trans 0.1 ]     ;; base change of transitioning from grsas to m-sh after base years
           [ set trans 0 ]
         
         ] 
         [
           set trans 0.1 + ( 1 - ((1 / forest-nhb) ^ (table:get aux-params-dict "grass-to-sh-exp") ))
         ]    ;; prob based onfarm-revegetate? nhb
         
         ;; TO DO - what about transition from grass to invaded shrubland? 
         if random-float 1 < trans
         [
           set class "m-sh"
 
           let n-fire-window length filter [ f -> f >= ticks - 30 ] fire-history
           let base table:get base-changes-dict class    ;; so time to *next* change estimated here
         
           ;;next change yr = base change + fire slowing + random noise  
           set next-change (ticks + (base + (n-fire-window * 2))) * (0.9 + random-float (table:get aux-params-dict "succ-noise"))
         
           set last-change ticks
           set times-change times-change + 1
           
           set n-changes n-changes + 1
         ]
      ]
      ]

      ;; invaded -> manuka shrubland
      if class = "d-sh"
      [
        set class "m-sh"
        
        ;;next change yr = base change + fire slowing + landscape + random noise      
        let n-fire-window length filter [ f -> f >= (ticks - (table:get aux-params-dict "fire-hist-len")) ] fire-history
        
        let n-ch table:get base-changes-dict class
        
        ifelse terrain-type = "flat"
        [ set n-ch ceiling ticks + (n-ch + (n-fire-window * 2))] 
        [ set n-ch ceiling ticks + ((n-ch + (n-fire-window * 2)) * (item (aspect-arc - 1) succ-aspect-wgt) * (item (tpi - 1) succ-tpi-wgt )) ]
        
        set n-ch n-ch * (0.9 + random-float (table:get aux-params-dict "succ-noise")) ;; noise
        
        set last-change ticks
        set times-change times-change + 1

        set n-changes n-changes + 1
      ]

      ;; manuka shrubland -> kanuka-x
      if class = "m-sh" and last-change != ticks;;next change yr = base change + fire slowing + random noise
      [ 
        
        ;; Distance based test for transition to pohutakawa
        let b0 table:get aux-params-dict "poh-coast-b0"
        let b1 table:get aux-params-dict "poh-coast-b1"
        let b2 table:get aux-params-dict "poh-coast-b1"
        
        ;; based on distance to coast do we transition to pohutukawa
        ifelse random-float 1 < (decr-limit-fx b0 b1 b2 (distance-to-coast / table:get aux-params-dict "max-poh-coast"))
        [
          set class "ksh-p"
        ]       
        ;; if not pohutakawa, nhb weighted coin toss on gradient
        [
          let kauri-nhb count neighbors with [ class = "ksh-k" ] 
          let k-wgt 0
          if kauri-nhb > 0 [set k-wgt ( 1 - ((1 / kauri-nhb) ^ (table:get aux-params-dict "kauri-nhb-exp") ))]
          
          ifelse random-float 1 < edaphic-grad + k-wgt
          [ set class "ksh-k" ]
          [ set class "ksh-nok" ]
        ] 
        
        let n-fire-window length filter [ f -> f >= (ticks - (table:get aux-params-dict "fire-hist-len")) ] fire-history
        
        let n-ch table:get base-changes-dict class
        
        ifelse terrain-type = "flat"
        [ set n-ch ceiling ticks + (n-ch + (n-fire-window * 2))] 
        [ set n-ch ceiling ticks + ((n-ch + (n-fire-window * 2)) * (item (aspect-arc - 1) succ-aspect-wgt) * (item (tpi - 1) succ-tpi-wgt )) ]
        
        set n-ch n-ch * (0.9 + random-float (table:get aux-params-dict "succ-noise")) ;; noise
        
        set next-change ticks + round n-ch
        
        set last-change ticks
        set times-change times-change + 1
        set stalled 0

        set n-changes n-changes + 1
      ]

      ;; kanuka-x -> young forest-x
      if (class = "ksh-p" or class = "ksh-k" or class = "ksh-nok") and last-change != ticks
      [
        let n-saps max (list item 1 regenbank-yfor item 1 regenbank-ofor)    ;; n-trees is max of type 3 or 4 to stop spurious stalling
        ifelse n-saps >= crit-density-yng
        [
          if track-stalled?
          [
            let n item 0 sum-changes
            let stl item 0 sum-stalled

            set sum-changes replace-item 0 sum-changes (n + 1)
            set sum-stalled replace-item 0 sum-stalled (stl + stalled)    ; replace-item index list value
          ]
          
          let new-class ""
          if class = "ksh-nok" [set new-class "yf-nok"]
          if class = "ksh-k" [set new-class "yf-k"]
          if class = "ksh-p" [set new-class "yf-p"]

          set class new-class
          
          let n-ch table:get base-changes-dict class
          ifelse terrain-type = "flat"
          [ set n-ch ceiling ticks + n-ch] 
          [ set n-ch ceiling ticks + (n-ch * (item (aspect-arc - 1) succ-aspect-wgt) * (item (tpi - 1) succ-tpi-wgt )) ]
          
          set n-ch next-change * (0.9 + random-float (table:get aux-params-dict "succ-noise")) ;; noise

          set next-change ticks + round n-ch
          set last-change ticks
          set times-change times-change + 1
          set stalled 0

          set n-changes n-changes + 1
        ]
        [
          set stalled stalled + 1    ;; stalled for a year...
        ]
      ]

      ;; young forest-x -> old forest-x
      if (class = "yf-p" or class = "yf-k" or class = "yf-nok") and last-change != ticks
      [
        let n-saps item 1 regenbank-ofor

        ifelse n-saps >= crit-density-old ;; and (ticks - (item 1 t-colonised)) >= (item 1 base-lag)
        [
          if track-stalled?
          [
            let n item 1 sum-changes
            let stl item 1 sum-stalled

            set sum-changes replace-item 1 sum-changes (n + 1)
            set sum-stalled replace-item 1 sum-stalled  (stl + stalled)
          ]

          let new-class ""
          if class = "yf-nok" or class = "yf-k" [set new-class "old-f"]
          if class = "yf-p" [set new-class "old-p"]

          set class new-class
          set next-change -999
          set last-change ticks
          set times-change times-change + 1
          set stalled 0

          set n-changes n-changes + 1
        ]
        [
          set stalled stalled + 1
        ]
      ]

      set flammability table:get flammability-dict class
    ]
  ]
end

to dispersal
  let target nobody
  let forest-age ""

  ;; what is dispersed is established saplings (effectively)
   ask repro-patches

   [
    let seed-rain 0
    
    if class = "yf-p" or class = "yf-k" or class = "yf-nok" [
      set seed-rain random-poisson base-seed-prod-yf
      set forest-age "young"
    ]

    if class = "old-p" or class = "old-f" [
     set seed-rain random-poisson base-seed-prod-of
     set forest-age "old"
   ]

    repeat random-binomial seed-rain (1 - seed-pred)
    [

        ifelse random-float 1 <= fraction-seed-ldd  ;; consumed and dispersed by pigeon
        [
          let d random-exponential mean-ldd
          set target patch-at-heading-and-distance (random-float 360) d
        ]
        [
          set target one-of (patch-set self neighbors)
        ]

        if target != nobody
        [
          ;; assume that seedlings of young forest spp can establish under any sort of veg, except invaded shrubland
          
          ;; no establishment of class 'yfor-x' in invaded shrubland OR grassland
          if forest-age = "young" and [class] of target != "d-sh" and [class] of target != "gr"
          [
            let n-sdl item 0 regenbank-yfor ; abundance of sdl of class x in the patch

            ask target
            [
              set regenbank-yfor replace-item 0 regenbank-yfor (n-sdl + 1)
              if (n-sdl + 1) >= crit-density-yng [set t-colonised replace-item 0 t-colonised ticks]  ;; 0 as first item in list
            ]
          ]

          ;; old forest spp only establish in kanuka shrubland [2] or older
          if forest-age = "old" and [class] of target != "d-sh" and [class] of target != "gr" and [class] of target != "m-sh"

          [
            let n-sdl (item 0 regenbank-ofor)    ; abundance of sdl of class x in the patch

            ask target
            [
              set regenbank-ofor replace-item 0 regenbank-ofor (n-sdl + 1)
              if (n-sdl + 1) >= crit-density-old [set t-colonised replace-item 1 t-colonised ticks] ;; 0 as second item in list
            ]
          ]

          ]

    ]
  ]
end

;; Thin the regeneration bank to simulate effects of herbivory
to herbivory-patch-bank

  ask patches
  [
    if sum regenbank-yfor > 0
    [
      let nsdl random-binomial item 0 regenbank-yfor (1 - sap-herbivory)
      let nsap random-binomial item 1 regenbank-yfor (1 - sap-herbivory)
      set regenbank-yfor (list nsdl nsap)
    ]
  
    if sum regenbank-ofor > 0
    [
      let nsdl random-binomial item 0 regenbank-yfor (1 - sap-herbivory)
      let nsap random-binomial item 1 regenbank-yfor (1 - sap-herbivory)
      set regenbank-yfor (list nsdl nsap)
    ]
   ]

end

;; Deals with regeneration in the seedling and sapling banks
to regenerate-patch-bank
  
  ; don't track once in old forest (no change) or no regenbank at all
  ask patches with [(class != "old" and class != "old-p") and (sum regenbank-yfor + sum regenbank-ofor > 0)]
  [     
    ; this could operate on binomial trials but very slow and mutiplication
    ; ok as an approximation given number of calcs...
    
    ; regen-bank for **young** forest species  
    ;let nsdl sum (map [ [a b] -> random-binomial a b ] regenbank-yfor (item 0 tr-mtx-bank-yfor))
    ;let nsap sum (map [ [a b] -> random-binomial a b ] regenbank-yfor (item 1 tr-mtx-bank-yfor))
    
    let nsdl sum (map [ [a b] -> round (a * b) ] regenbank-yfor (item 0 tr-mtx-bank-yfor))
    let nsap sum (map [ [a b] -> round (a * b) ] regenbank-yfor (item 1 tr-mtx-bank-yfor))
    
    
    set regenbank-yfor (list nsdl nsap)
    
   ; if sum regenbank-yfor > 0 [show regenbank-yfor]
    
    ; regen-bank for **old** forest species  
    ;set nsdl sum (map [ [a b] -> random-binomial a b ] regenbank-ofor (item 0 tr-mtx-bank-ofor))
    ;set nsap sum (map [ [a b] -> random-binomial a b ] regenbank-ofor (item 1 tr-mtx-bank-ofor))
    
    set nsdl sum (map [ [a b] -> round (a * b) ] regenbank-ofor (item 0 tr-mtx-bank-ofor))
    set nsap sum (map [ [a b] -> round (a * b) ] regenbank-ofor (item 1 tr-mtx-bank-ofor))
    
    set regenbank-ofor (list nsdl nsap)
    
        ; if sum regenbank-ofor > 0 [show regenbank-ofor]
  ]
    
end


;; Convenience reporters
to-report old-growth-patches
  report patches with [class = "old-p" or class = "old-f"]
end

to-report repro-patches
  report patches with [class = "yf-p" or class = "yf-k" or class = "yf-nok" or class = "old-f" or class = "old-p"]
end