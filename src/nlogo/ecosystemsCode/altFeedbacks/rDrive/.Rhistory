library('lme4')
install.packages('rJava')
library(rJava)
install.packages('rJava')
q()
load("~/Scifac/private/SourceCode/NetLogo/fireModels/altFeedbacks/paperAnalysis/UA/ua2k.RData")
params[66,]
ls()
op
op[66,]
library("rJava", lib.loc="/usr/lib64/R/library")
X <- rpoispp(100)
library(spatstat)
X <- rpoispp(100)
source('~/.active-rstudio-document', echo=TRUE)
library(spatstat)
library(rJava)
install.packages('spatstat')
library(spatstat)
X <- rpoispp(100)
?envelope
X <- rpoispp(100)
X.e <- envelope(X, fun = pcf, nsim = 199, savefuns = TRUE)
names(X.e)
X.e
str(X.e)
attr(X.e, simfuns)
attr(X.e)
X.e$simfuns
?attr
attributes(X.e)
attributes(X.e)$simfuns
matrix(attributes(X.e)$simfuns)
nSims <- 199
X <- rpoispp(100)
X.e <- envelope(X, fun = pcf, nsim = nSims, savefuns = TRUE)
allK.X <- as.matrix(attr(X.e, "simfuns"))[,(1:nSims)+1]
head(allK.X)
plot(allK.X[,1])
pcf(X)
pcf(X)$iso
pcf(X)$iso - allG.X[1]
allG.X <- as.matrix(attr(X.e, "simfuns"))[,(1:nSims)+1]
pcf(X)$iso - allG.X[,1]
maxGoFIndex <- 512
iSim <- 1
sum((allG.X[1:maxGoFIndex] - allG.X$theo[1:maxGoFIndex])^2)
sum((allG.X[1,1:maxGoFIndex] - allG.X$theo[1:maxGoFIndex])^2)
,maxGoFIndex
maxGoFIndex
dim(allG.X)
ge <- allG.X[,iSim]
sum((ge[1:maxGoFIndex] - allG.X$theo[1:maxGoFIndex])^2)
allG.X
sum((ge[1:maxGoFIndex] - X.g$theo[1:maxGoFIndex])^2)
X.g <- pcf(X)
sum((ge[1:maxGoFIndex] - X.g$theo[1:maxGoFIndex])^2)
sum((ge[1:maxGoFIndex] - X.g$theo[1:maxGoFIndex])^2, na.rm = TRUE)
?suim
?sum
allG.X <- as.matrix(attr(X.e, "simfuns"))[,(1:nSims)+1]
sum((ge[1:maxGoFIndex] - X.g$theo[1:maxGoFIndex])^2, na.rm = TRUE)
cVM.list <- array(0, nSims)
cVM.list
pseudoP <- function(simList, obs, nsims, asRank = TRUE)
{
list.pos <- sum(simList > obs) + 1
ifelse(asRank, pseudoP <- list.pos, pseudoP <- (list.pos)/(nsims+1))
pseudoP
}
library(spatstat)
nSims <- 199
X <- rpoispp(100)
obs.X <- pcf(X)
X.e <- envelope(X, fun = pcf, nsim = nSims, savefuns = TRUE)
allG.X <- as.matrix(attr(X.e, "simfuns"))[,(1:nSims)+1]
maxGoFIndex <- 512
minGoFIndex <- 2    # set to 2 for PCF as at r = 0 you get Inf
cVM.list <- array(0, nSims)
for (iSim in 1:nSims)
{
ge <- allG.X[,iSim]
cVM.List[iSim] <- sum((ge[minGoFIndex:maxGoFIndex] - X.g$theo[minGoFIndex:maxGoFIndex])^2)
}
cVM.obs <- sum((obs.X$iso[minGoFIndex:maxGoFIndex] - obs.X$theo[minGoFIndex:maxGoFIndex])^2, na.rm = TRUE)
cVM.simAve <- mean(cVM.list)
cVM.simSD <- sd(cVM.list)
cVM.p <- pseudoP(cVM.list, cVM.obs, nSims)
library(spatstat)
nSims <- 199
X <- rpoispp(100)
obs.X <- pcf(X)
X.e <- envelope(X, fun = pcf, nsim = nSims, savefuns = TRUE)
allG.X <- as.matrix(attr(X.e, "simfuns"))[,(1:nSims)+1]
maxGoFIndex <- 512
minGoFIndex <- 2    # set to 2 for PCF as at r = 0 you get Inf
cVM.list <- array(0, nSims)
for (iSim in 1:nSims)
{
ge <- allG.X[,iSim]
cVM.list[iSim] <- sum((ge[minGoFIndex:maxGoFIndex] - X.g$theo[minGoFIndex:maxGoFIndex])^2)
}
cVM.obs <- sum((obs.X$iso[minGoFIndex:maxGoFIndex] - obs.X$theo[minGoFIndex:maxGoFIndex])^2, na.rm = TRUE)
cVM.simAve <- mean(cVM.list)
cVM.simSD <- sd(cVM.list)
cVM.p <- pseudoP(cVM.list, cVM.obs, nSims)
cVM.p
p / 199
6 / 199
cVm.obs
cVM.obs
cVM.simAve
nSims <- 199
X <- rpoispp(100)
obs.X <- pcf(X)
X.e <- envelope(X, fun = pcf, nsim = nSims, savefuns = TRUE)
allG.X <- as.matrix(attr(X.e, "simfuns"))[,(1:nSims)+1]
maxGoFIndex <- 512
minGoFIndex <- 2    # set to 2 for PCF as at r = 0 you get Inf
cVM.list <- array(0, nSims)
for (iSim in 1:nSims)
{
ge <- allG.X[,iSim]
cVM.list[iSim] <- sum((ge[minGoFIndex:maxGoFIndex] - X.g$theo[minGoFIndex:maxGoFIndex])^2)
}
cVM.obs <- sum((obs.X$iso[minGoFIndex:maxGoFIndex] - obs.X$theo[minGoFIndex:maxGoFIndex])^2, na.rm = TRUE)
cVM.simAve <- mean(cVM.list)
cVM.simSD <- sd(cVM.list)
cVM.p <- pseudoP(cVM.list, cVM.obs, nSims)
cVM.p
?sapply
cVM.list <- sapply(1:nSims, function(x) {
ge <- allG.X[,x]
sum((ge[minGoFIndex:maxGoFIndex] - X.g$theo[minGoFIndex:maxGoFIndex])^2)
})
cVM.list
cVM.list <- array(0, nSims)
for (iSim in 1:nSims)
{
ge <- allG.X[,iSim]
cVM.list[iSim] <- sum((ge[minGoFIndex:maxGoFIndex] - X.g$theo[minGoFIndex:maxGoFIndex])^2)
}
cVM.list
cVM.list <- sapply(1:nSims, function(x) {
ge <- allG.X[,x]
sum((ge[minGoFIndex:maxGoFIndex] - X.g$theo[minGoFIndex:maxGoFIndex])^2)
})
cVM.list
library(spatstat)
nSims <- 199
X <- rpoispp(100)
obs.X <- pcf(X)
X.e <- envelope(X, fun = pcf, nsim = nSims, savefuns = TRUE)
allG.X <- as.matrix(attr(X.e, "simfuns"))[,(1:nSims)+1]
maxGoFIndex <- 512
minGoFIndex <- 2    # set to 2 for PCF as at r = 0 you get Inf
cVM.list <- sapply(1:nSims, function(x) {
ge <- allG.X[,x]
sum((ge[minGoFIndex:maxGoFIndex] - X.g$theo[minGoFIndex:maxGoFIndex])^2)
})
cVM.obs <- sum((obs.X$iso[minGoFIndex:maxGoFIndex] - obs.X$theo[minGoFIndex:maxGoFIndex])^2, na.rm = TRUE)
cVM.simAve <- mean(cVM.list)
cVM.simSD <- sd(cVM.list)
cVM.p <- pseudoP(cVM.list, cVM.obs, nSims)
pseudoP <- function(simList, obs, nsims, asRank = TRUE)
{
list.pos <- sum(simList > obs) + 1
ifelse(asRank, pseudoP <- list.pos, pseudoP <- (list.pos)/(nsims+1))
pseudoP
}
cVM.p
library(rJava)
setwd("~/Scifac/private/SourceCode/NetLogo/fireModels/altFeedbacks/rDrive")
require(snowfall)
require(RNetLogo)
processors <- 6 # detectCores()
sfInit(parallel=TRUE, cpus=processors, type="SOCK", slaveOutfile = "logXoom2.txt")
sfClusterSetupRNG()
gui <- FALSE
nl.path <- "/home/gper020/bin/netlogo-5.1.0"
model.path <- "/home/gper020/Scifac/private/SourceCode/NetLogo/fireModels/altFeedbacks/altFeedbacks-Regen.nlogo"
source("analyses-UA.r")
invisible(sfLapply(1:processors, prepro, gui = gui, nl.path = nl.path, model.path = model.path))
n.runs <- 600
n.reps <- 20
n.params.eval <- 19
n.sv.returned <- 12
params <- matrix(rep(0, n.runs * n.params.eval), nc = n.params.eval)
params[,1] <- rep(TRUE, n.runs)  			# called from R?
params[,2] <- rep(5000, n.runs)				# length
params[,3] <- rep(10, n.runs)				# burn-in length
params[,4] <- rep(0.00, n.runs)     		# fire-frequency
params[,5] <- rep(0.4, n.runs)        		# frac-consumed
params[,6] <- rep(seq(0.6, 0.745, 0.005), times = n.reps)        # seed-pred
params[,7] <- rep(4, n.runs)            # mean-ldd (patch units)
params[,8] <- rep(0.5, n.runs)          # flamm-start
params[,9] <- rep(0.05, n.runs)          # base-invasion
params[,10] <- round(rep(2, n.runs))    # fire-slow
params[,11] <- rep(0.10, n.runs)        # fire-invasion
params[,12] <- round(rep(4, n.runs))    # base-seed-prod-3
params[,13] <- round(rep(4, n.runs))    # base-seed-prod-4
params[,14] <- round(rep(10, n.runs))   # crit-density-yng
params[,15] <- round(rep(10, n.runs))   # crit-density-old
params <- as.data.frame(params)   # do this before booleans, etc.
i.test <- round(0)   # invasion?
params[,16] <- as.factor(i.test == 1)  # invasion?
params[,17] <- 1				   # record-tag (identifier for fire record files)
params[,18] <- rep(0.95, n.runs)       # max forest before stop
params[,19] <- as.factor(i.test == 1)  # no need to write the fire record
names(params) <- c("from-r", "max-ticks", "burn-in-regen", "fire-frequency", "frac-consumed", "seed-pred",
"mean-ldd", "flamm-start", "base-invasion", "fire-slow", "fire-invasion", "base-seed-prod-3", "base-seed-prod-4",
"crit-density-yng", "crit-density-old", "invasion", "record-tag", "max-forest", "write-record")
sfExport("params")   # preload the parameters file onto the slaves
dim(params)
runs
r <- 1:n.runs
sfClusterEval(ls())
result.par <- sfClusterApplyLB(r, simfun.ua)
# print(data.frame(t(result.par)))
pred.zoom.scenario2 <- data.frame(matrix(unlist(t(result.par)), nc = n.sv.returned, byrow = TRUE))
pred.zoom.scenario2 <- cbind(params, pred.zoom.scenario2)
names(pred.zoom.scenario2) <- c("from.r", "max.ticks", "burn.in.regen", "fire.frequency", "frac.consumed", "seed.pred",
"mean.ldd", "flamm.start", "base.invasion", "fire.slow", "fire.invasion", "base.seed.prod3", "base.seed.prod.4",
"crit.density.yng", "crit.density.old", "invasion", "record.tag", "max.forest", "write.record",
"run.id", "abund1", "abund2", "abund3", "abund4", "abund5", "bft", "ticks",  "n.fire", "max.fire",
"sum.fire", "ave.fire")
save.image(file = "predationZoomScenario2.RData")
cat(paste(" done and saved.", '\n'))
# system('mergeFireRecords.py')    # this binds all the fire-records together.
invisible(sfLapply(1:processors, postpro))
sfStop()
ls()
result.par.z2 <- result.par
rm(result.par)
params.z2 <- params
rm(params)
ls()
save.image("~/Scifac/private/SourceCode/NetLogo/fireModels/altFeedbacks/rDrive/predationZoomScenario2.RData")
