;to regenerate-patch-bank-mtx
;  ask patches with [class < 4]  ;; no need to keep track once into old forest
;  [     
;     ;; first for class 3 (yng forest) bank
;     if sum-vector regenbank-3 > 0
;     [
;       set regenbank-3 matrix:times matrix-3 regenbank-3
;       matrix:set-column regenbank-3 0 (map round (matrix:get-column regenbank-3 0))
;
;     ]
;     
;     ;; then for class 4 (old forest) bank
;     if sum-vector regenbank-4 > 0
;     [
;       set regenbank-4 matrix:times matrix-4 regenbank-4
;       matrix:set-column regenbank-4 0 (map round (matrix:get-column regenbank-4 0))
;     ;; and then for the class r
;     ]
;  
;  ]  
;  
;end
;
;to-report sum-vector [v]
;    report sum item 0 (matrix:to-column-list v)
;end


;; Non-matrix based code - easier to deal with and possibly quicker?
to regenerate-patch-bank
  
  ;; Update using lists:: no need to keep track once into old forest
  ask patches with [ class < 4 ]
  [
    if sum seedlings + sum saplings > 0
    [
      ;; juvenile mortality 
      let dead-saplings (map [random-binomial ?1 ?2] saplings sapling-mortality)
      let dead-seedlings (map [random-binomial ?1 ?2] seedlings seedling-mortality)
  
      set saplings (map [?1 - ?2] saplings dead-saplings)   
      set seedlings (map [?1 - ?2] seedlings dead-seedlings)
  
  
      ;; sapling regeneration
      let new-saplings (map [random-binomial ?1 ?2] seedlings seedling-transition)
  
  
      ;; saplings at t + 1 <- saplings * (1 - mort) + (seedlings * transition)
      set saplings (map [?1 + ?2] saplings new-saplings) 
  
      ;; seedlings at t + 1 <- seedlings * (1 - mort - transition) - new-saplings (+ dispersal elsewhere)
      set seedlings (map [?1 - ?2] seedlings new-saplings)
    ]  
  ]
end

to reset-regen-bank
  set seedlings (list 0 0)
  set saplings (list 0 0)
end    
    