 ;Select location of potential ignition
 ;TO DO = if burning only occurs under 'good' extrinsic conditions then test for fire at all...

to-report ignite-fire [extrinsic]
  set fire-size 0
  let succ-ignition? false
  
  let target nobody
  
  ; Does the fire start in a flammable vegetation type?
  ifelse any? patches with [ class = "d-sh" or class = "m-sh" or class = "gr" ] and random-float 1 <= flamm-start
  [
    set target one-of patches with [ class = "d-sh" or class = "m-sh" or class = "gr" ]
  ]
  [
    set target one-of patches
  ]
  
  ; Get the fire underway...
  ask one-of patch-set target [ 

    if random-float 1 <= ([flammability] of target * 2)
    [
      ; record initial fire conditions
      set fire-stats (list (ticks) extrinsic enso-state ([class] of target) ([farm?] of target) (count [neighbors with [flammability < 0.25]] of target ) (mean [flammability] of patches) )

      foreach abundances [ i -> set fire-stats lput (i / world-size) fire-stats ]

      set burned? true
      set pcolor red
      set fire-front patch-set self           ;A new fire-front patch-set
      set fire-size 1
      set succ-ignition? true                 ;A fire has started!
    ]
  ]

  report succ-ignition?
end

; This spreads the fire - idea of a shell follows Ratz (1995)
; fire spread - sped up by using patchset to store the active fire-front
to fire-spread [extrinsic]
  
  let pSpread 0
  let fireDamp 1
  
  let windSpeed (random 3) + 1
  let windDirection (random 8) * 45    ;For convenience this is the direction blowing *towards*
  
  ; Modifiers from Millington et al in EMS
  ; let windModifiers (list (list 1.1 1.05 1.0 0.95 0.9) (list 1.2 1.1 1.0 0.9 0.8) (list 1.5 1.0 0.9 0.8 0.7))
  
  while [ any? fire-front ]                   ;Stop when we run out of flaming fireFront
  [  
     let new-fire-front patch-set nobody      ;Empty set of patches for the next 'round' of the fire
   
     ask fire-front                           ;Ask patches neighbouring the fireFront to see if they ignite
     [
       let fx pxcor
       let fy pycor
       let fz elevation
       
       ask neighbors with [ not burned? ]
       [  
        ; slope calculations as per Millington EMS
        let slopeWgt get-slope-weight (elevation - fz)
        
        ; wind calculations as per Millington EMS    
        let cellBearing atan (pxcor - fx)  (pycor - fy)  ; Bearing from ignited patch (pxcor, pycor) to candidate patch (nx,ny)
        let relDirn abs(windDirection - cellBearing)     ; Dir of fire spread relative to wind (difference)
        if relDirn > 180 [set relDirn 360 - relDirn]     ; Corrected to bound angle (0,180) 
          
        let windWgt item (relDirn / 45) (item (windSpeed - 1) flamm-wind-wgt) 
        
        
        
        ; edge drying calculations
        ; forest cells on edge of open veg are more flammable (as per Tepley et al. in Ecosystems) 
        let n-edge-nhb count neighbors with [ class = "d-sh" or class = "m-sh" or class = "gr" ]
        let edge-wgt n-edge-nhb * (table:get aux-params-dict "edge-flamm-wgt")
          
        ; compute the base flammability multiplier 
        let baseMultiplier (windWgt * (1 + extrinsic) * (1 + edge-wgt))
        set pSpread flammability * baseMultiplier
          
          ; show pSpread 
        
        if random-float 1 < (pSpread )
          [
            set burned? true                                            ; Need to change status here so they don't get ignited twice
            set new-fire-front ( patch-set new-fire-front self)         ; Add newly ignited patches to the new-fireFront
          ]
        ]
     ]
   
    ask new-fire-front [set pcolor red]
    set fire-front new-fire-front
 
   ]    
 
 end

;; Write out the fire history
to write-fire-record

  ;; first add the header
  let p1 map [ i -> (word "pre_prop_" i )] class-names-list
  let p2 map [ i -> (word "post_prop_" i )] class-names-list

  let header (list "ticks" "extrinsic" "enso_state" "start_veg" "start_farm" "n_nhb_flamm" "pre_mean_flamm")
  set header lput p1 header
  set header lput "fire_size" header
  set header lput p2 header
  set header lput (list "post_mean_flamm" "new_invasions") header
  
  set fire-record fput (unnest header) fire-record 
  
  let tag ""
  
  ifelse nlrx-info = "" [ set tag behaviorspace-run-number ] [ set tag nlrx-info ]
  csv:to-file (word "fire_record" tag ".csv") fire-record
  
end

to-report getTheta [x1 y1 x2 y2]

  let x_offset x2 - x1
  let y_offset y2 - y1
  
  
  let theta atan x_offset y_offset
  
  if theta > 180 [ set theta theta - ( ( (theta - 180) / 45) * 90) ]

report theta

end

;; this gets the slope weight from the appropriate lists
to-report get-slope-weight [sl]

  let i 0
  while [ item i flamm-slope-breaks < sl and i < (length flamm-slope-breaks) - 1] [

    set i i + 1]
  
  if sl > last flamm-slope-breaks [set i i + 1]
  report item i flamm-slope-wgt

end  



  